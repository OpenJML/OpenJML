#! /bin/bash 

## This file tests a release of the OpenJML tool
## This is just a quick "smoke" test to make sure that 
## the tool runs on simple inputs
## It is intended to be run with the OpenJML project directory as its 
## current working directory, but does its work in a temporary subdirectory

## Execute any local setup
if [[ -n "${LOCAL_SETUP}" ]]; then
    echo Executing local setup ${LOCAL_SETUP}
	source ${LOCAL_SETUP}
fi

java -version
which java

Z=:
if [[ "$COMSPEC" != "" ]] ; then
Z=';'
fi


REL=$1
if [[ "$REL" == "" ]] ; then REL=`ls -t *gz | head -1` ; fi
echo Testing $REL in `pwd`

rm -rf temp-release
mkdir temp-release
cp $REL temp-release
cd temp-release
cp ../openjml.properties .

TESTLOC=../releaseTests

export RTH=../releaseTests/releaseTestHelper
RES=0

## Checks the contents of the release tar file
${RTH} testTar "tar ztf *gz" || RES=$(($RES+1))

## Expand the tar file (quietly)
tar zxf *gz

## Checks the version
echo Visually check that the version matches the tar file being tested
java -jar openjml.jar -version
${RTH} testJmlVersion "java -jar openjml.jar -version" || RES=$(($RES+1))


## Checks the help message (when there are no arguments)
${RTH} testJmlHelp "java -jar openjml.jar" || RES=$(($RES+1))

## Checks the help message (when there is a -help option)
${RTH} testJmlHelp "java -jar openjml.jar -help" || RES=$(($RES+1))


echo "public class A { /*@ invariant 0; */ }" > A.java
echo "public class B { /*@ invariant true; */ }" > B.java
echo "import org.jmlspecs.annotation.Pure; public class C { @Pure int m() { return 0; } }" > C.java
echo "import org.jmlspecs.annotation.*; public class D { @Pure int m() { return 0; } }" > D.java

## FIXME - uses unchecked calls
## Checks a valid file using java -jar
${RTH} testOK1 "java -jar openjml.jar -noPurityCheck -Xlint:unchecked -specspath . B.java" || RES=$(($RES+1))

## rac
rm -rf rac
mkdir -p rac
${RTH} testRac "java -jar openjml.jar -rac -noRacSource -noPurityCheck -d rac -classpath ../testfiles/testRac -specspath ../testfiles/testRac ../testfiles/testRac/A.java" || { RES=$(($RES+1)); }
echo RAC-OK
#echo java -classpath "rac${Z}jmlruntime.jar" A
java -classpath "rac${Z}jmlruntime.jar" A  > racactual
tr -d '\r' < racactual |  diff - ../releaseTests/testRac/expected-ok || { RES=$(($RES+1)); }
echo RAC-SIMPLE
java -classpath "rac${Z}jmlruntime.jar" A 1 2  > racactual
tr -d '\r' < racactual | sed -e 'sx\\x/xg' | diff - ../releaseTests/testRac/expected-simple || { RES=$(($RES+1)); }
echo RAC-EXC
java -classpath "rac${Z}jmlruntime.jar" -Dorg.jmlspecs.openjml.racexceptions A 1 2 > racactual  2>&1
tr -d '\r' < racactual | sed -e 'sx\\x/xg' |  diff - ../releaseTests/testRac/expected-exceptions || { RES=$(($RES+1)); }
echo RAC-BOTH
java -classpath "rac${Z}jmlruntime.jar" -Dorg.jmlspecs.openjml.racexceptions -Dorg.jmlspecs.openjml.racshowstack A 1 2   > racactual  2>&1
tr -d '\r' < racactual | sed -e 'sx\\x/xg' |  diff - ../releaseTests/testRac/expected-exceptions || { RES=$(($RES+1)); }
echo RAC-ST
java -classpath "rac${Z}jmlruntime.jar" -Dorg.jmlspecs.openjml.racshowstack A 1 2 > racactual
tr -d '\r' < racactual | sed -e 'sx\\x/xg' |  diff - ../releaseTests/testRac/expected-stack || { RES=$(($RES+1)); }


## FIXME - uses unchecked calls
## Checks a valid file using java -classpath
${RTH} testOK2 "java -classpath openjml.jar org.jmlspecs.openjml.Main  -Xlint:unchecked -noPurityCheck -specspath . B.java" || RES=$(($RES+1))

## This checks verbose output - which changes too often to put in the 
## regular test suite
if [[ "$COKENV" != "" ]] ; then
## Checks a valid file with jmlverbose
${RTH} testOK3 "java -jar openjml.jar -noPurityCheck -specspath . B.java -jmlverbose" || RES=$(($RES+1))
fi

## Checks a valid file with no internal specs
${RTH} testOK4 "java -jar openjml.jar -specspath . B.java -noInternalSpecs" || RES=$(($RES+1))

## Checks a valid file with no internal runtime library - should fail to find annotations
${RTH} testRuntime1 "java -jar openjml.jar C.java -jmltesting -classpath . -noPurityCheck -noInternalRuntime" || RES=$(($RES+1))

## ANNOTATIONS might be an absolute or relative path.  We are currently in
## OpenJML/temp-release so if absolute we want ${ANNOTATIONS}, if relative we want ../${ANNOTATIONS}

if [ ! -e ${ANNOTATIONS} ]; then
  ANNOTATIONS=../${ANNOTATIONS}
fi

## Checks a valid file with an external binary runtime library - should be OK
${RTH} testRuntime2 "java -jar openjml.jar C.java -noPurityCheck -classpath ../bin-runtime${Z}${ANNOTATIONS}/bin -noInternalRuntime"  || RES=$(($RES+1))

## Checks a valid file with an external source runtime library - should be OK
${RTH} testRuntime3 "java -jar openjml.jar C.java -noPurityCheck -classpath ../runtime${Z}${ANNOTATIONS}/src -noInternalRuntime" || RES=$(($RES+1))

## Checks using annotations with normal use - should be OK
${RTH} testRuntime4 "java -jar openjml.jar C.java -noPurityCheck " || RES=$(($RES+1))

## Checks using annotations with normal use - should be OK
${RTH} testRuntime5 "java -jar openjml.jar D.java -noPurityCheck " || RES=$(($RES+1))

## Checks using classpath - ok, uses specs in java file
${RTH} testEsc1 "java -jar openjml.jar -noPurityCheck -esc ../testfiles/testEsc/A.java -classpath ../testfiles/testEsc" || RES=$(($RES+1))

## Checks using classpath - ok, uses specs in java file
${RTH} testEsc2 "java -jar openjml.jar -noPurityCheck -esc ../testfiles/testEsc/B.java -classpath ../testfiles/testEsc" || RES=$(($RES+1))


export SWITCHSLASH=YES
## Checks using no paths - fails to find super class, uses specs in java file
${RTH} testPath1 "java -jar openjml.jar -jmltesting -noPurityCheck ../testfiles/testPath/data/TestPath.java " || RES=$(($RES+1))

## Checks using classpath - ok, uses specs in java file
${RTH} testPath2 "java -jar openjml.jar -jmltesting -noPurityCheck ../testfiles/testPath/data/TestPath.java -classpath ../testfiles/testPath/data" || RES=$(($RES+1))

## Checks using specs path - finds specs but not super class
${RTH} testPath3 "java -jar openjml.jar -jmltesting -noPurityCheck ../testfiles/testPath/data/TestPath.java -specspath ../testfiles/testPath/data-specs " || RES=$(($RES+1))

## Checks using source path - finds specs but not super class
${RTH} testPath4 "java -jar openjml.jar -jmltesting -noPurityCheck ../testfiles/testPath/data/TestPath.java -sourcepath ../testfiles/testPath/data-specs " || RES=$(($RES+1))

## Checks using source path (specs and java) - finds specs and super class
${RTH} testPath5 "java -jar openjml.jar -jmltesting -noPurityCheck ../testfiles/testPath/data/TestPath.java -sourcepath ../testfiles/testPath/data-specs${Z}../testfiles/testPath/data " || RES=$(($RES+1))

## Checks using source path (java then specs) - finds super class; uses jml file for specs even though it is later on the search path
${RTH} testPath6 "java -jar openjml.jar -jmltesting -noPurityCheck ../testfiles/testPath/data/TestPath.java -sourcepath ../testfiles/testPath/data${Z}../testfiles/testPath/data-specs" || RES=$(($RES+1))

## Checks using source path and specs path - uses specs file, finds super class
${RTH} testPath7 "java -jar openjml.jar -jmltesting -noPurityCheck ../testfiles/testPath/data/TestPath.java -sourcepath ../testfiles/testPath/data -specspath ../testfiles/testPath/data-specs" || RES=$(($RES+1))

## Checks using class path (specs and java) - finds specs and super class
${RTH} testPath8 "java -jar openjml.jar -jmltesting -noPurityCheck ../testfiles/testPath/data/TestPath.java -classpath ../testfiles/testPath/data-specs${Z}../testfiles/testPath/data " || RES=$(($RES+1))

## Checks using class path (java then specs) - finds super class; uses jml file for specs
${RTH} testPath9 "java -jar openjml.jar -jmltesting -noPurityCheck ../testfiles/testPath/data/TestPath.java -classpath ../testfiles/testPath/data${Z}../testfiles/testPath/data-specs" || RES=$(($RES+1))

## Checks using class path and specs path - uses specs file, finds super class
${RTH} testPath10 "java -jar openjml.jar -jmltesting -noPurityCheck ../testfiles/testPath/data/TestPath.java -classpath ../testfiles/testPath/data -specspath ../testfiles/testPath/data-specs" || RES=$(($RES+1))

export SWITCHSLASH=

## FIXME - this gives an odd error message.  The presence/absence of rt.jar makes no difference
##   adding additional spec files or removing -noInternalSpecs gets past this error, but not sure why
##   also why would runtime be in the specs path?
#java -jar openjml.jar -classpath "../bin" -sourcepath ../testfiles/testNoErrors -specs "../runtime" -noPurityCheck -noInternalSpecs ../testfiles/testNoErrors/A.java || { RES=$(($RES+1)); }


## Checks an invalid file
export SWITCHSLASH=YES
${RTH} testCheck1 "java -jar openjml.jar -jmltesting -noPurityCheck -specspath . A.java" || RES=$(($RES+1))
export SWITCHSLASH=

if [[ "${COMSPEC}" == "" ]]; then
    if [[ ${RES} -eq 0 ]]; then echo "All tests performed succeeded"; else echo ${RES} tests failed  ; fi
    echo Exiting tests early because the OS is not Windows
    exit ${RES}
fi

## FIXME
if [[ "SKIP" == "" ]]; then

export DIFFJMLDOC="diff -r "

### Note: package-tree.html is excluded because it is non-deterministic

## checks jmldoc prettyprinting
rm -rf doc ../testfiles/prettyprint/actual
${RTH} testJmldocPP "java -classpath openjml.jar org.jmlspecs.openjml.jmldoc.Main -d doc -private -notimestamp -noPurityCheck ../testfiles/prettyprint/data/PP.java " || { RES=$(($RES+1)); }
${DIFFJMLDOC} -x '.svn' -x 'package-tree.html' doc ../testfiles/prettyprint/expected || { RES=$(($RES+1)); rm -rf ../testfiles/prettyprint/actual; mv doc ../testfiles/prettyprint/actual; }

## jmldoc check
rm -rf doc ../testfiles/jmldoc1/actual
${RTH} testJmldoc "java -classpath openjml.jar org.jmlspecs.openjml.jmldoc.Main -d doc -notimestamp -noPurityCheck ../testfiles/jmldoc1/data/*.java " || { RES=$(($RES+1)); }
${DIFFJMLDOC} -x '.svn' -x 'package-tree.html' doc ../testfiles/jmldoc1/expected || { RES=$(($RES+1)); rm -rf ../testfiles/jmldoc1/actual; mv doc ../testfiles/jmldoc1/actual; }

## jmldoc - checking the -java flag; uses the jmldoc3 input data
rm -rf doc ../testfiles/jmldoc2/actual
export NOSTDDOCLET=1
${RTH} testJmldoc2 "java -classpath openjml.jar org.jmlspecs.openjml.jmldoc.Main -java -d doc -public -notimestamp -noPurityCheck ../testfiles/jmldoc3/data/*.java ../testfiles/jmldoc3/data/tp/*.java" || { RES=$(($RES+1)); }
${DIFFJMLDOC} -x '.svn' -x 'package-tree.html' doc ../testfiles/jmldoc2/expected || { RES=$(($RES+1)); mv doc ../testfiles/jmldoc2/actual; }
export NOSTDDOCLET=

## jmldoc - checking the -public flag
rm -rf doc ../testfiles/jmldoc3/actual
${RTH} testJmldoc3 "java -classpath openjml.jar org.jmlspecs.openjml.jmldoc.Main -d doc -public -notimestamp -noPurityCheck ../testfiles/jmldoc3/data/*.java ../testfiles/jmldoc3/data/tp/*.java" || { RES=$(($RES+1)); }
${DIFFJMLDOC} -x '.svn' -x 'package-tree.html' doc ../testfiles/jmldoc3/expected || { RES=$(($RES+1)); mv doc ../testfiles/jmldoc3/actual; }

## jmldoc - checking the -protected flag - purposely uses the jmldoc3 data
rm -rf doc ../testfiles/jmldoc4/actual
${RTH} testJmldoc4 "java -classpath openjml.jar org.jmlspecs.openjml.jmldoc.Main -d doc -protected -notimestamp -noPurityCheck ../testfiles/jmldoc3/data/*.java ../testfiles/jmldoc3/data/tp/*.java" || { RES=$(($RES+1)); }
${DIFFJMLDOC} -x '.svn' -x 'package-tree.html' doc ../testfiles/jmldoc4/expected || { RES=$(($RES+1)); mv doc ../testfiles/jmldoc4/actual; }

## jmldoc - checking the -package flag - purposely uses the jmldoc3 data
rm -rf doc ../testfiles/jmldoc5/actual
${RTH} testJmldoc5 "java -classpath openjml.jar org.jmlspecs.openjml.jmldoc.Main -d doc -package -notimestamp -noPurityCheck ../testfiles/jmldoc3/data/*.java ../testfiles/jmldoc3/data/tp/*.java" || { RES=$(($RES+1)); }
${DIFFJMLDOC} -x '.svn' -x 'package-tree.html' doc ../testfiles/jmldoc5/expected || { RES=$(($RES+1)); mv doc ../testfiles/jmldoc5/actual; }

## jmldoc - checking the -private flag - purposely uses the jmldoc3 data
rm -rf doc ../testfiles/jmldoc6/actual
${RTH} testJmldoc6 "java -classpath openjml.jar org.jmlspecs.openjml.jmldoc.Main -d doc -private -notimestamp -noPurityCheck ../testfiles/jmldoc3/data/*.java ../testfiles/jmldoc3/data/tp/*.java" || { RES=$(($RES+1)); }
${DIFFJMLDOC} -x '.svn' -x 'package-tree.html' doc ../testfiles/jmldoc6/expected || { RES=$(($RES+1)); mv doc ../testfiles/jmldoc6/actual; }


## jmldoc - checking the -private flag - purposely uses the jmldoc3 data
rm -rf doc ../testfiles/jmldoc7/actual
${RTH} testJmldoc7 "java -classpath openjml.jar org.jmlspecs.openjml.jmldoc.Main -d doc -private -notimestamp -noPurityCheck -dir ../testfiles/jmldoc3/data -dir ../testfiles/jmldoc3/data/tp" || { RES=$(($RES+1)); }
${DIFFJMLDOC} -x '.svn' -x 'package-tree.html' doc ../testfiles/jmldoc7/expected || { RES=$(($RES+1)); mv doc ../testfiles/jmldoc7/actual; }

## jmldoc - checking the -private flag - purposely uses the jmldoc3 data
rm -rf doc ../testfiles/jmldoc7/actual
${RTH} testJmldoc7 "java -classpath openjml.jar org.jmlspecs.openjml.jmldoc.Main -d doc -private -notimestamp -noPurityCheck -dirs ../testfiles/jmldoc3/data ../testfiles/jmldoc3/data/tp" || { RES=$(($RES+1)); }
${DIFFJMLDOC} -x '.svn' -x 'package-tree.html' doc ../testfiles/jmldoc7/expected || { RES=$(($RES+1)); mv doc ../testfiles/jmldoc7/actual; }

## jmldoc - checking the -private flag - purposely uses the jmldoc3 data
rm -rf doc ../testfiles/jmldoc7/actual
${RTH} testJmldoc7 "java -classpath openjml.jar org.jmlspecs.openjml.jmldoc.Main -d doc -private -noPurityCheck -dirs ../testfiles/jmldoc3/data ../testfiles/jmldoc3/data/tp  -notimestamp" || { RES=$(($RES+1)); }
${DIFFJMLDOC} -x '.svn' -x 'package-tree.html' doc ../testfiles/jmldoc7/expected || { RES=$(($RES+1)); mv doc ../testfiles/jmldoc7/actual; }





fi

if [[ ${RES} -eq 0 ]]; then echo "All tests succeeded"; else echo ${RES} tests failed  ; fi


cd ..
##rm -rf temp-release
exit ${RES}
