/*IN PROGRESS - NOT FOR DISTRIBUTION*/
// TODO - Licensing
package java.lang;

/**
 * JML's specification of AbstractStringBuilder.
 * @author Mike Rawding
 * TODO - Credits
 */
//@ spec_public
abstract class AbstractStringBuilder implements Appendable, CharSequence {

    /*@ spec_public @*/ byte[] value; //@ in modelValue;
    
    /*@ spec_public @*/ int count; //@ in stringLength;
    
    //@ public static ghost char[] nullChars = {'n', 'u', 'l', 'l'};
    //@ public ghost char[] trueChars = {'t', 'r', 'u', 'e'};
    //@ public ghost char[] falseChars = {'f', 'a', 'l', 's', 'e'};
    
    //@ public model int stringLength; //@ in modelValue;
    //@ public represents stringLength = count;
    
    //@ public model int capacity;
    //@ public represents capacity = modelValue.length;
    
    //@ public model char[] modelValue;  //@ in capacity, charArray, _value;
    
    //@ public invariant modelValue != null;  // FIXME    
    //@ public invariant 0 <= capacity;
    //@ public invariant 0 <= stringLength <= capacity;
    //@ public invariant (\forall int i; stringLength <= i < capacity; modelValue[i] == '\0');
    
  
    //@ ensures stringLength == 0;
    AbstractStringBuilder(); //1
    
    /*@ normal_behavior
      @   requires 0 <= capacity;
      @   ensures modelValue.length == capacity;
      @   ensures stringLength == 0;
      @ also
      @ exceptional_behavior
      @   requires capacity < 0;
      @   signals_only NegativeArraySizeException;
      @*/
    /*@ pure @*/AbstractStringBuilder(int capacity); //2
    
    //@ also public normal_behavior 
    //@   ensures \result == stringLength;
    public /*@ pure @*/ int length(); //3
    
    //@ public normal_behavior
    //@   ensures \result == capacity;
    public /*@ pure @*/ int capacity(); //4
    
    /*@ public normal_behavior
      @   requires minimumCapacity > capacity;
      @   assignable modelValue, _value, capacity;
      @   ensures this.capacity >= minimumCapacity;
      @ also
      @ public normal_behavior
      @   requires minimumCapacity <= capacity;
      @   assignable \nothing;
      @*/
    public void ensureCapacity(int minimumCapacity); //5
    
    private void ensureCapacityInternal(int minimumCapacity); //6
    
//    private int newCapacity(int minCapacity); //7
//    
//    private int hugeCapacity(int minCapacity); //8
    
    /*@ public normal_behavior//TODO - Precondition error. Seems like these preconditions combined with class invariants should be sufficient to describe all behavior 
      @   requires this.count < this.modelValue.length;
      @   assignable this.modelValue, capacity;
      @   ensures this.stringLength == this.capacity;
      @ also
      @ public normal_behavior
      @   requires this.count == this.modelValue.length;
      @   assignable \nothing;
      @*/
    public void trimToSize(); //9
    
    /*@ public normal_behavior
      @   requires stringLength < newLength;
      @   assignable modelValue, capacity;
      @   assignable stringLength;
      @   ensures stringLength == newLength;
      @   ensures newLength <= capacity;
      @ also
      @ public normal_behavior
      @   requires 0 <= newLength <= stringLength;
      @   assignable modelValue, capacity;
      @   ensures stringLength == newLength;
      @   ensures capacity == \old(capacity);
      @ also
      @ public exceptional_behavior
      @   requires newLength < 0;
      @   assignable \nothing;
      @   signals_only IndexOutOfBoundsException;
      @*/
    public void setLength(int newLength); //10
    
    /*@ also public normal_behavior //TODO precondition errors
      @   requires (0 <= index < stringLength);
      @   assignable \nothing;
      @   ensures \result == modelValue[index];
      @ also 
      @ public exceptional_behavior
      @   requires (index < 0 || index >= stringLength);
      @   signals_only StringIndexOutOfBoundsException;
      @*/
    public char charAt(int index); //11
    
    public int codePointAt(int index); //12
    
    public int codePointBefore(int index); //13
    
    public int codePointCount(int beginIndex, int endIndex); //14
    
    public int offsetByCodePoints(int index, int codePointOffset); //15
    
    
    /*@ public normal_behavior
      @   requires !(srcBegin < 0 || srcEnd < 0 || srcEnd > stringLength || srcBegin > srcEnd);
      @   requires !(srcEnd-srcBegin > dst.length-dstBegin);
      @   requires dst != null;
      @   ensures (\forall int i; srcBegin <= i < srcEnd; modelValue[i] == dst[i + dstBegin]);
      @ also
      @ public exceptional_behavior
      @   requires (srcBegin < 0 || srcEnd < 0 || srcEnd > stringLength || srcBegin > srcEnd);
      @   signals_only StringIndexOutOfBoundsException;
      @ also
      @ public exceptional_behavior
      @   requires (srcEnd-srcBegin > dst.length-dstBegin);
      @   signals_only ArrayIndexOutOfBoundsException;
      @
      @*/
    public /*@ pure @*/ void getChars(int srcBegin, int srcEnd, char[] dst, int dstBegin); //16
    
    /*@ public normal_behavior
      @   requires 0 <= index && index < stringLength;
      @   assignable modelValue[index];
      @   ensures value[index] == ch;
      @   ensures (\forall int i; 0 <= i < stringLength && i != index; modelValue[i] == \old(modelValue[i]));
      @ public exceptional_behavior
      @   requires (index < 0 || index >= stringLength);
      @   signals_only StringIndexOutOfBoundsException;
      @*/
    public void setCharAt(int index, char ch); //17
    
    /*@ public normal_behavior //TODO - ESC seems to hang, need to check spec
      @   requires obj == null;
      @   assignable modelValue;
      @   assignable stringLength;
      @   assignable capacity;
      @*/
    //-RAC-ESC@   ensures (\forall int i; 0 <= i && i < nullChars.length; value[\old(stringLength)+i] == nullChars[i]);
    //-RAC-ESC@   ensures stringLength == \old(stringLength) + nullChars.length; //TODO Skipping a specification clause because it contains an uncompiled ghost or model field: nullChars
    /*@   ensures \result == this;
      @ also 
      @ public normal_behavior
      @   requires obj != null;
      @   assignable modelValue;
      @   assignable stringLength;
      @   assignable capacity;
      @   ensures (\forall int i; 0 <= i < String.valueOf(obj).length(); value[\old(stringLength)+i] == String.valueOf(obj).charAt(i));
      @   ensures stringLength == \old(stringLength) + String.valueOf(obj).length();
      @   ensures \result == this;
      @*/
    public AbstractStringBuilder append(/*@ nullable @*/ Object obj); //18
    
    /*@ public normal_behavior
      @   requires str == null;
      @   assignable modelValue, stringLength, capacity;
      @*/
    //-RAC@   ensures (\forall int i; 0 <= i < nullChars.length; modelValue[\old(stringLength)+i] == nullChars[i]);
    //-RAC@   ensures stringLength == \old(stringLength) + nullChars.length;
    /*@   ensures \result == this;
      @ also 
      @ public normal_behavior
      @   requires str != null;
      @   assignable modelValue, stringLength, capacity;
      @   ensures (\forall int i; 0 <= i < str.length(); modelValue[\old(stringLength)+i] == str.charAt(i));
      @   ensures stringLength == \old(stringLength) + str.length();
      @   ensures count == \old(count) + str.length();
      @   ensures \result == this;
      @*/
    public AbstractStringBuilder append(/*@ nullable @*/ String str); //19
    
    public AbstractStringBuilder append(/*@ nullable @*/ StringBuffer sb); //20
    
    AbstractStringBuilder append(/*@ nullable @*/ AbstractStringBuilder asb); //21
    
    public AbstractStringBuilder append(/*@ nullable @*/ CharSequence s); //22
    
    private AbstractStringBuilder appendNull(); //23
    
    public AbstractStringBuilder append(CharSequence s, int start, int end); //24
    
    public AbstractStringBuilder append(char/*@ nullable @*/ [] str); //25
    
    public AbstractStringBuilder append(char str /*@ nullable @*/ [], int offset, int len); //26
    
    /*@ public normal_behavior
      @   requires b == true;
      @   ensures stringLength == \old(stringLength + trueChars.length);
      @   ensures (\forall int i; \old(stringLength) <= i < stringLength; value[i] == trueChars[i - \old(stringLength)]);
      @   ensures \result == this;
      @ also
      @ public normal_behavior
      @   requires b == false;
      @   ensures stringLength == \old(stringLength + falseChars.length);
      @   ensures (\forall int i; \old(stringLength) <= i < stringLength; value[i] == falseChars[i - \old(stringLength)]);
      @   ensures \result == this;
      @*/
    public AbstractStringBuilder append(boolean b); //27
    
    /*-ESC@ ensures stringLength == \old(stringLength) +1; 
      @ ensures modelValue[\old(stringLength)] == c; //TODO UndefinedTooLargeIndex with ESC
      @ ensures \result == this;
      @*/
    public AbstractStringBuilder append(char c); //28
    
    /*@
      @ assignable modelValue, capacity;
      @ ensures stringLength == \old(stringLength) + String.valueOf(i).length();
      @ ensures \result == this;
      @*/
    public AbstractStringBuilder append(int i); //29
    
    /*@
      @ assignable modelValue, capacity;
      @ ensures stringLength == \old(stringLength) + String.valueOf(l).length();
      @ ensures \result == this;
      @*/
    public AbstractStringBuilder append(long l); //30
    
    /*-ESC@ // ESC error: logic does not support reals
      @ assignable modelValue, capacity;
      @ ensures stringLength == \old(stringLength) + String.valueOf(f).length();
      @ ensures \result == this;
      @*/
    public AbstractStringBuilder append(float f); //31
    
    /*-ESC@ // ESC error: logic does not support reals
      @ assignable modelValue, capacity;
      @ ensures stringLength == \old(stringLength) + String.valueOf(d).length();
      @ ensures \result == this;
      @*/
    public AbstractStringBuilder append(double d); //32
    
    /*@ public normal_behavior
      @   requires 0 <= start && start <= end && start <= stringLength;
      @   assignable modelValue, capacity;
      @   ensures stringLength == \old(stringLength) - (Math.min(\old(stringLength), end) - start);
      @   ensures (\forall int i; 0 <= i && i < start; modelValue[i] == \old(modelValue[i]));
      @   ensures \result == this;
      @ also
      @ public exceptional_behavior
      @   requires start < 0 || start > end || start > stringLength;
      @   assignable \nothing;
      @   signals_only StringIndexOutOfBoundsException;
      @*/
    public AbstractStringBuilder delete(int start, int end); //33
    
    public AbstractStringBuilder appendCodePoint(int codePoint); //34
    
    /*@ public normal_behavior
      @   requires 0 <= index < stringLength;
      @   ensures stringLength == \old(stringLength) - 1;
      @   ensures (\forall int i; 0 <= i < index; modelValue[i] == \old(modelValue[i]));
      @   ensures (\forall int i; index <= i < stringLength; modelValue[i] == \old(modelValue[i + 1])); 
      @   ensures \result == this;
      @ also
      @ public exceptional_behavior
      @   requires index < 0 || index >= stringLength;
      @   signals_only StringIndexOutOfBoundsException;
      @*/
    public AbstractStringBuilder deleteCharAt(int index); //35
    
    /*@ public normal_behavior
      @   requires 0 <= start && start <= end && start <= stringLength;
      @   ensures stringLength == \old(stringLength);
      @   ensures \result == this;
      @ also
      @ public normal_behavior
      @   requires start < 0 || start > end || start > stringLength;
      @   //signals_only StringIndexOutOfBoundsException;
      @*/
    public AbstractStringBuilder replace(int start, int end, String str); //36
    
    /*-ESC@ public normal_behavior //TODO - no feasible path to program exit
      @   requires 0 <= start && start <= stringLength;
      @   ensures \result.length() == stringLength - start;
      @   ensures (\forall int i; 0 <= i && i < \result.length(); \result.charAt(i) == value[i + start]);
      @ also
      @ public exceptional_behavior
      @   requires start < 0 || start > stringLength;
      @   signals_only StringIndexOutOfBoundsException;
      @
      @*/
    public /*@ pure @*/ String substring(int start); //37
    
    /*@ also public normal_behavior //TODO - no feasible path to program exit
      @   requires 0 <= start && start <= end && end <= capacity; 
      @   ensures \result.length() == end - start;
      @   ensures (\forall int i; 0 <= i < \result.length(); \result.charAt(i) == modelValue[i + start]);
      @ also
      @ public exceptional_behavior
      @   requires start < 0 || end > capacity || start > end;
      @   signals_only StringIndexOutOfBoundsException;
      @*/
    public /*@ pure @*/ CharSequence subSequence(int start, int end); //38
    
    /*@ public normal_behavior //TODO - no feasible path to program exit
      @   requires 0 <= start && start <= end && end <= capacity; 
      @   ensures \result.length() == end - start;
      @   ensures (\forall int i; 0 <= i < \result.length(); \result.charAt(i) == modelValue[i + start]);
      @ also
      @ public exceptional_behavior
      @   requires start < 0 || end > capacity || start > end;
      @   signals_only StringIndexOutOfBoundsException;
      @*/
    public /*@ pure @*/ String substring(int start, int end); //39
    
    /*@ public normal_behavior
      @   requires str != null && 0 <= index <= stringLength && len >= 0 && 0 <= offset <= str.length - len;
      @   assignable modelValue, capacity;
      @   ensures stringLength == \old(stringLength) + len;
      @   ensures (\forall int i; 0 <= i < index; modelValue[i] == \old(modelValue[i]));
      @   ensures (\forall int i; index <= i < index + len; modelValue[i] == str[i - offset]);
      @   ensures (\forall int i; index + len <= i < stringLength; modelValue[i] == \old(modelValue[i + len]));
      @   ensures \result == this;
      @   ensures \result.length() == \old(this.length()) + len;
      @ also
      @ public exceptional_behavior
      @   requires str != null && !(0 <= index <= stringLength && len >= 0 && 0 <= offset <= str.length - len);
      @   assignable \nothing;
      @   signals_only StringIndexOutOfBoundsException;
      @ also
      @ public exceptional_behavior
      @   requires str == null;
      @   assignable \nothing;
      @   signals_only NullPointerException;
      @*/
    public AbstractStringBuilder insert(int index,  char /*@ nullable @*/ [] str, int offset, int len); //40
    
    /*@ public normal_behavior
      @   requires 0 <= offset <= stringLength;
      @   old String s = String.valueOf(obj);
      @   old int slen = s.length();
      @   assignable modelValue, capacity;
      @   ensures (\forall int i; 0 <= i < offset; modelValue[i] == \old(modelValue[i]));
      @   ensures (\forall int i; offset <= i < offset + slen; modelValue[i] == s.charAt(i - offset));
      @   ensures (\forall int i; offset + slen <= i < stringLength; modelValue[i] == \old(modelValue[i + slen]));
      @   ensures \result == this;
      @ also
      @ public exceptional_behavior
      @   requires !(0 <= offset <= stringLength);
      @   assignable \nothing;
      @   signals_only StringIndexOutOfBoundsException;
      @*/
    public AbstractStringBuilder insert(int offset,  /*@ nullable @*/ Object obj); //41
    
    /*@ public normal_behavior
      @   requires 0 <= offset <= stringLength;
      @   old String s = str == null ? "null" : s;
      @   old int len = s.length();
      @   assignable modelValue, capacity;
      @   ensures stringLength == \old(stringLength) + len;
      @   ensures (\forall int i; 0 <= i < offset; modelValue[i] == \old(modelValue[i]));
      @   ensures (\forall int i; offset <= i < offset + len; modelValue[i] == s.charAt(i - offset));
      @   ensures (\forall int i; offset + len <= i < stringLength; modelValue[i] == \old(modelValue[i + len]));
      @   ensures \result == this;
      @   ensures stringLength == \old(stringLength) + len;
      @ also
      @ public exceptional_behavior
      @   requires offset < 0 || offset > stringLength;
      @   assignable \nothing;
      @   signals_only StringIndexOutOfBoundsException;
      @*/
    public AbstractStringBuilder insert(int offset, /*@ nullable @*/ String str); //42
    
    /*@ public normal_behavior
      @   requires str != null && 0 <= offset <= stringLength;
      @   old int len = stringLength;
      @   assignable modelValue, capacity;
      @   ensures (\forall int i; 0 <= i < offset; modelValue[i] == \old(modelValue[i]));
      @   ensures (\forall int i; offset <= i < offset + str.length; modelValue[i] == str[i - offset]);
      @   ensures (\forall int i; offset + str.length <= i < stringLength; modelValue[i] == \old(modelValue[i + str.length]));
      @   ensures \result == this;
      @   ensures stringLength == \old(stringLength) + str.length;
      @ also
      @ public exceptional_behavior
      @   requires str != null && (offset < 0 || offset > stringLength);
      @   assignable \nothing;
      @   signals_only StringIndexOutOfBoundsException;
      @ also
      @ public exceptional_behavior
      @   requires str == null;
      @   assignable \nothing;
      @   signals_only NullPointerException;
      @*/
    public AbstractStringBuilder insert(int offset, char /*@ nullable @*/ [] str); //43
    
    //@ public normal_behavior
    //@     ensures \result.length() == this.length() + (s==null? 4: s.length());
    public AbstractStringBuilder insert(int dstOffset,  /*@ nullable @*/ CharSequence s); //44
    
    //@ public normal_behavior
    //@     requires 0 <= dstoffset <= this.length() && 0 <= start <= end <= s.length();
    //@     requires this.length() + (end-start) <= Integer.MAX_VALUE;
    //@     assignable modelValue, capacity;
    //@     ensures \result.length() == this.length() + (end-start);
    //@     ensures \result == this;
    public AbstractStringBuilder insert(int dstoffset, CharSequence s, int start, int end); //45
    
    public AbstractStringBuilder insert(int offset, boolean b); //46
   
    public AbstractStringBuilder insert(int offset, char c); //47
    
    public AbstractStringBuilder insert(int offset, int i); //48
    
    public AbstractStringBuilder insert(int offset, long l); //49
    
    public AbstractStringBuilder insert(int offset, float f); //50
    
    public AbstractStringBuilder insert(int offset, double d); //51
    
    /*@ public normal_behavior
      @   requires str != null;
      @ also
      @ public exceptional_behavior
      @   requires str == null;
      @   signals_only NullPointerException;
      @*/
    public /*@ pure @*/ int indexOf(/*@ nullable @*/ String str); //52  
//TODO - should things like this really be nullable? 
//TODO - I want to express that a NullPointerException will be throw, 
//TODO - but I do not necessarily want to indicate that null is acceptable
    
    public /*@ pure @*/ int indexOf(/*@ nullable @*/String str, int fromIndex); //53
    
    public int lastIndexOf(String str); //54
    
    public int lastIndexOf(String str, int fromIndex); //55
    
    public AbstractStringBuilder reverse(); //56
    
    public /*@ pure @*/ abstract String toString(); //58
    
    final /*@ pure @*/ byte[] getValue(); //59
}
