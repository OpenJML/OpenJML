name: Build OpenJML

on:
  workflow_dispatch:
  push:
    branches: [ dev-21 ]

env:
  ## Branch to build from (both in OpenJML and Specs). (JMLAnnotation, Solvers, openjml.github.io are fixed to be 'master')
  BRANCH: dev-21
  ## Name of folder containing openjml code within OpenJML repo. Ought to match the triggering branch in 'on push'.
  FOLDER: OpenJML21

jobs:
  prepare:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout OpenJML
      run: |
        git config --global core.autocrlf input
        git clone -b $BRANCH --depth 1 https://github.com/OpenJML/OpenJML
    - name: Create the GitHub release
      ## Do this just once -- not for every element of the matrix
      run: |
        cd OpenJML
        export ver=`cat version.txt`
        echo Version $ver
        curl -s -X POST -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -d "{\"tag_name\":\"$ver\", \"target_commitish\":\"master-module\", \"name\":\"OpenJML $ver\", \"draft\":true, \"body\":\"Publishing release $ver\"}" "https://api.github.com/repos/OpenJML/OpenJML/releases"
        export id=`curl --silent "https://api.github.com/repos/OpenJML/OpenJML/releases" --header 'Authorization: token ${{ secrets.GITHUB_TOKEN }}' |grep '"id":' | head -1 | sed -e 's/.*: //' -e 's/,//'`
        echo Created release with id $id

  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        ## FIXME: Figure out how to share this matrix with the upload job below
        ## Until then, keep the two in synch
        os: [macos-14, ubuntu-22.04, macos-13, ubuntu-20.04]
      fail-fast: false

    steps:
    - name: Manually sync certs
      if: runner.os == 'Linux'
      run: cert-sync /etc/ssl/certs/ca-certificates.crt
    - name: MacOSX additions
      if: runner.os == 'MacOS'
      run: |
        brew install coreutils
    - name: Linux additions
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install libxext-dev libxtst-dev libxrandr-dev libcups2-dev
        sudo apt-get install autoconf 
        sudo apt-get install libasound2-dev
    - name: Setup Cygwin for Windows
      if: runner.os == 'Windows'
      uses: egor-tensin/setup-cygwin@v3
      with:
        platform: x64
        packages: cmake python3 autoconf make zip unzip ar m4 free file gawk cpio
    - uses: actions/setup-python@v1
    - name: Set up JDK21 
      uses: actions/setup-java@v1
      with:
        java-version: 1.21
    - name: Checkout OpenJML
      run: |
        git config --global core.autocrlf input
        git clone -b $BRANCH --depth 1 https://github.com/OpenJML/OpenJML
        git clone -b $BRANCH --depth 1 https://github.com/OpenJML/Specs
        git clone -b master --depth 1 https://github.com/OpenJML/Solvers
        git clone -b master --depth 1 https://github.com/OpenJML/JMLAnnotations
        git clone -b master --depth 1 https://github.com/OpenJML/openjml.github.io
    - name: Build OpenJML release on Windows
      if: runner.os == 'Windows'
      run: |
        basic() {
          cd D:/a/OpenJML/OpenJML
          cd OpenJML/$FOLDER
          bash ./configure
          make release 
        }
        basic
      shell: C:\tools\cygwin\bin\bash.exe --login --norc -eo pipefail -o igncr '{0}'
    - name: Build OpenJML release on non-Windows
      if: runner.os != 'Windows'
      run: |
        cd OpenJML/$FOLDER
        bash ./configure
        make release 
    - name: Test the release
      run: |
        make -C OpenJML/$FOLDER release-test

    ## Only need 'prepare' to have concluded by this point in the job
    - name: Wait for prepare
      uses: yogeshlonkar/wait-for-jobs@v0
      with:
        gh-token: ${{ secrets.GITHUB_TOKEN }}
        jobs: prepare 
        interval: '2000'
        ttl: '10'


    - name: Copy OpenJML build into GitHub release
      run: |
        cd OpenJML
        export ver=`cat version.txt`
        cd $FOLDER/release-temp
        export f=openjml-${{ matrix.os }}-${ver}.zip
        mv *.zip $f
        export id=`curl --silent "https://api.github.com/repos/OpenJML/OpenJML/releases" --header 'Authorization: token ${{ secrets.GITHUB_TOKEN }}' |grep '"id":' | head -1 | sed -e 's/.*: //' -e 's/,//'`
        export upload_url="https://uploads.github.com/repos/OpenJML/OpenJML/releases/$id/assets"
        echo Uploading $f to id $id at url $upload_url
        curl -s -X POST -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -H "Content-Type: application/zip" --data-binary @$f  "$upload_url?name=$f&label=$f" 
    - name: Check current GitHub release number against version.txt
      run: |
        cd OpenJML
        export ver=`cat version.txt`
        export tag=$var
        export tag=`curl --silent --header 'Authorization: token ${{ secrets.GITHUB_TOKEN }}' "https://api.github.com/repos/OpenJML/OpenJML/releases" | grep tag_name | head -1 | sed -e 's/.*: \"//' -e 's/\",//'`
        echo $ver $tag
        test "$ver" = "$tag" || echo Version $ver is not the current release, which is $tag
