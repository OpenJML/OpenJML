Proving methods in openjml.demo.Types
Starting proof of openjml.demo.Types.Types() with prover !!!!
Feasibility check #1 - end of preconditions : OK
Feasibility check #2 - at program exit : OK
Completed proof of openjml.demo.Types.Types() with prover !!!! - no warnings
Starting proof of openjml.demo.Types.types3(java.util.List<java.lang.Integer>) with prover !!!!
..\OpenJMLDemo\src\openjml\demo\Types.java:9: warning: The prover cannot establish an assertion (Assert) in method types3
		//@ assert false; // ERROR
		    ^
Completed proof of openjml.demo.Types.types3(java.util.List<java.lang.Integer>) with prover !!!! - with warnings
Starting proof of openjml.demo.Types.types2(java.util.List<java.lang.Integer>) with prover !!!!
..\OpenJMLDemo\src\openjml\demo\Types.java:13: warning: Label A has value true
		//@ ghost boolean b1 = (\lbl A \type(Integer) <: \type(Number));// true
		                             ^
..\OpenJMLDemo\src\openjml\demo\Types.java:14: warning: Label B has value true
		//@ ghost boolean b2 = (\lbl B \type(java.util.ArrayList<Integer>) <: \type(java.util.List<Integer>)); // true
		                             ^
..\OpenJMLDemo\src\openjml\demo\Types.java:15: warning: Label C has value false
		//@ ghost boolean b3 = (\lbl C \type(java.util.ArrayList<Integer>) <: \type(java.util.List<Number>)); // false
		                             ^
..\OpenJMLDemo\src\openjml\demo\Types.java:16: warning: Label E has value true
		//@ ghost boolean b5 = (\lbl E \erasure(\type(java.util.ArrayList)) <: \erasure(\type(java.util.List))); // true
		                             ^
..\OpenJMLDemo\src\openjml\demo\Types.java:18: warning: The prover cannot establish an assertion (Assert) in method types2
		//@ assert false; // To be sure of feasibility and so that labels are printed
		    ^
Completed proof of openjml.demo.Types.types2(java.util.List<java.lang.Integer>) with prover !!!! - with warnings
Starting proof of openjml.demo.Types.<T>types(java.util.List<T>) with prover !!!!
Feasibility check #1 - end of preconditions : OK
Feasibility check #2 - after explicit assume statement : OK
Feasibility check #3 - at program exit : OK
Completed proof of openjml.demo.Types.<T>types(java.util.List<T>) with prover !!!! - no warnings
Starting proof of openjml.demo.Types.<T>types5(java.util.List<T>) with prover !!!!
Feasibility check #1 - end of preconditions : OK
Feasibility check #2 - after explicit assume statement : OK
Feasibility check #3 - before explicit assert statement : OK
Feasibility check #4 - at program exit : OK
Completed proof of openjml.demo.Types.<T>types5(java.util.List<T>) with prover !!!! - no warnings
Starting proof of openjml.demo.Types.<T>types4(java.util.List<T>) with prover !!!!
Feasibility check #1 - end of preconditions : OK
Feasibility check #2 - after explicit assume statement : OK
Feasibility check #3 - at program exit : OK
Completed proof of openjml.demo.Types.<T>types4(java.util.List<T>) with prover !!!! - no warnings
Starting proof of openjml.demo.Types.types1(java.util.List<?>) with prover !!!!
..\OpenJMLDemo\src\openjml\demo\Types.java:40: warning: The prover cannot establish an assertion (PossiblyBadCast) in method types1:  a java.lang.Object cannot be proved to be a java.lang.Integer
		/*@ nullable */ Integer i = (Integer)a.get(0); // ERROR - a ? is not necessarily an Integer
		                            ^
Completed proof of openjml.demo.Types.types1(java.util.List<?>) with prover !!!! - with warnings
Starting proof of openjml.demo.Types.typesr(java.util.List<?>) with prover !!!!
Feasibility check #1 - end of preconditions : OK
Feasibility check #2 - at program exit : OK
Completed proof of openjml.demo.Types.typesr(java.util.List<?>) with prover !!!! - no warnings
Starting proof of openjml.demo.Types.<T>typesz(java.util.List<T>) with prover !!!!
Feasibility check #1 - end of preconditions : OK
Feasibility check #2 - at program exit : OK
Completed proof of openjml.demo.Types.<T>typesz(java.util.List<T>) with prover !!!! - no warnings
Completed proving methods in openjml.demo.Types
7 warnings
