Done:

ToDo:
- Multidimensional arrays
- Array initializers
- \fresh
- strings
- errors in field initializers, initializers
- using initializers as part of constructors

To fix for release
- recursive use of invariant - racfiles.testBug1
- better handling of strings
- invariants in RAC?
- tracing
- quantifiers for static methods, invariants

Fix
- tracing 
- review foreach loops once more
- better error message for yices2 and quantifiers
- better error message for CVC4 and non-linear constructs
- cancel jobs in the Plugin stop method - use job families
- use a WorkspaceRunnable for resource changes
- what other things need Invariants assumed/checked
- what about invariants of parents of type variables
- fix default assignable for constructors
- new arrays inside JML expressions, especially quantifiers
- problems with quantified expressions as invariants in RAC

Soon
- loop modifies, and general block modifies
- interface between UI and tool
- demo files
- preferences for feasibility
- fix Z3 command arguments

Tracing issues
- insert constants for newly allocated objects (from new)
- report no method or new value if the method or constructor throws an exception
- show chars as characters?

Integer types
- need to assume value ranges
- need to check for overflows

Strings
- need fresh semantics on the output
- need determinism
- need to debug testStringLength3

Output
- give assertion warnings with more explanation
- other half of associated location information

Education issues
- Warnings about JML subsets

Loop issues:
- formulation problem in escTraceDo
- problem with display of expressions that are used more than once (like loop invariants and variants); might be true of callee preconditions, replicated method preconditions
- havoc computation needs review - do a loop modifies check

Recent issues:
- need UI for feasibility checks
- reorganize postcondition checks to allow checking feasibility of spec cases

- DMZ's recursive use of functions requiring invariants to be checked in invariants (seen in RAC)
- Check that ESC on a method without typechecking or with bad typecheck is OK
- visibility of default assignable this.* for constructors
- require at least one spec case at method visibility
- enforce strictness of clause ordering?
- need a check for undefined pure methods
- denested specs are causing multiple evaluations
- pure methods are supposed to be deterministic
- transitive, final subtype relationships
- test showing control flow for all statement types
- test getting values for all expression types
- finish fixing java types of generic types
- trying to show specs for a method that is not typechecked complains - should just do the typechecking

- ESC on method can have NPE if no typecheck completed
- when old is used, values shown have encoded names

Plug-in
- Review
    use of Timer
    use of uiverboseness
    review when runtime library is added/removed
    review Utils.java, OpenJMLInterface, JmlEclikpseProblem, ProblemRequestor, JMLBuilder
    fix errorlog mechanisms
    enhance SolversPage
    change all uses of errorlog to error dialog boxes?
    review JMLBuilder and building routines
    clean up context menu items
    review SolversPage.java
    unify ChoiceDialog, EnumDialog; add Title
- implement feasibility checks
- implement feasibility check at a specific place
- would like to report old values for op= assignments and x++
- bug in printing position in the UI
- start position wrong for assert?
- show exception info for catch clauses
- show exception info in the UI? exception highlighting?
- manage multiple proofs, show proof information
- specs editing dialog is modeless, which means that one can add and remove
    from the specs path - but these are not reflected in the specs editing
    dialog until it is regenerated
- change PopupActions to Eclipse 4.2
- PopupActions class names are gratuitously different than MenuActions
- Unify PathsEditor, RACDialog, SolverListEditor   
Other:
- RAC constructor
- havoc

To do soon
- constraint
- thisID for invariants in applyHelper
- tracing and counterexamples
- plugin: rac options, tracing, counterexamples

Things to do./check to be up to old implementation
- static checking of represents
- model fields in RAC and ESC
- check model classes in ESC
- constraint
- RAC checking of represents
- introduce axioms for all mentioned types
- handling constructors
- finish signals_only
- in clause in RAC
- \TYPE in ESC and RAC
- <: operator in ESC and RAC
- recursive calls in specs (ESC)
- implement: \fresh, \elemtype, \typeof, \type
- [quantified expressions] - test on RAC
- [new informal expression]
- checks on visibility of identifiers in specification cases, invariants
- Java features in RAC, at least as a pass through

New Java things to document
- switch on enum and String
- enum
- autoboxing
- coveriant return types
- binary literals, underscores in literals
- diamond type inference
- try with resources
- catching multiple exceptions and rethrowing
- (Java 8) lambda expressions
- (Java 8) JSR 308
- (Java 6) classpath wildcards
- (Java 6) compiler API, dependency information

Yet to implement
- enum definition
- switch with enum or String
- break/continue statement does not execute intervening finally blocks
- lock operations, synchronized statement
- unrolling loops
- local classes
- havoc in loops

Yet to test
- continue with label
- dowhile statements with side effects

Things to standardize or discuss
- search algorithm on .jml files
- rules about Java comments embedded in JML
- default for signals_only
- use of ESC RAC DEBUG as standard keys
- cross state comparisons with \old, \pre
- set comprehension issues, type
- \same
- semantics (Visibility) of helper methods
- nullable_by_default vs. non_null_by_default
- optional also, flexible order of clauses

Changes to propose
- example vs. behavior
- choose, choose_if
- \lbl
- otherwise/else
- \index, \values
- query, secret

Recent stuff
- new options: RAC source, Rac check assumptions, Rac display mode, esc Asserts, style of ESC
- old options: --noJML --roots --showbb, --stopIfParseErrors
- get rid of old update site versions
- try packaging solvers
- ESC on MAC
- review api tests and interface
- handling .jml files
- review verbosity, progress monitors
- in nowarn - check that idents are known

Recent stuff - UI
- typechecking a WorkingSet causes tasks to be run in parallel (in different contexts) - and it is not clear from the UI what is happening
- each static check appears to redo all typechecking
- progress when multiple items are selected in plugin
- debug output from OpenJML goes to wrong log
- finish converting debug System.out to log
- options not passed through to OpenJML - have to use args
- options do not update on consecutive ESCs
- editing of paths - a specific src folder is not recognized as in the 'all source folders'
- get rac to work from plugin
- verbosity needs more work (SEND)
- preferences need a little more fixing up
- how to handle .jml files
- how to handle Eclipse reporting errors in .jml files
- estimating work items for .jml files is wrong (may differ from .java and the .jml files are not processed)
- try other solvers
- menu item to generate .jml files
- preferences: roots; remove noInternalSpecs
- incrementality

Other
-- compile style
-- annotations processing
-- generics
-- test locale; more localization

Product pieces
- typechecker for JML and extensions
- user guide
- API
- ESC
- RAC
- jmldoc
- Eclipse integration
- counterexample exploration
- set of Java annotations
Integration with JMLUnitNG, Joe's project

RECENT THINGS NOT TO FORGET
- DONE: assignment to non-static fields
- tests for constraint and axiom
- inherited specs
- inherited method specs with renaming
- check on esc and rac mix everywhere
- loops and loop specs

- sort out set and debug
- assignable with model fields
- represents, model fields, in and maps

- refining statements
- anonymous class expressions
- local class declarations
- model class declaration
- model programs
- otherwise/else?

VARIOUS TASKS
run jmldoc instead of javadoc
implement method calls, new objects
implement method calls in jml expressions
implement loops, \index, \values
implement types, \typeof, \type, \TYPE, <:, instanceof, type casts
implement boxing and other implicit conversions
implement set comprehension
implement quantified expressions
implement the fcn-like JML tokens
implement lbl-expressions: use SMT functionality - decide how to print
implement \max, <# <#= other concurrency 
implement field access and assignment
implement array access and assignment
implement new array
finish frame conditions
put comments in basic blocks in a consistent way
implement inherited specs
implement using specs from referenced classes
change scan to scanret where appropriate; same for other visitors?
implement alloc, \fresh, heapvar?
move assumption checking to JmlAssertionAdder
Java 7 features in ESC
    string in switch
    diamond
    multi-catch
    try with resources

NOTES and TODO items from code reviews and major features

To review:
- everything in OpenJML, JMLAnnotations, Specs, OpenJMLUI except
JmlFlow



To Do:
JmlFlow - implement flow checks for JML statements and expressions
review notes below about OpenJDK

Jmldoc:
- nested model classes are written with fully qualified names and without links to their own pages
- some errors on Enums in generating jmldoc* tests
- model enums


OpenJDK differences:
[ 41 changed files: 12 visibility; 21 minor; 8 more major changes]
com.sun.tools.doclets.formats.html
    AbstractMemberWriter - 1 visibility
    ConfigurationImpl - 2 visibility
    HtmlDocletWriter - comment changes to avoid comments that look like JML
com.sun.tools.doclets.internal.toolkit
*   AbstractDoclet - visibility, plus an extra case to quietly exit in some circumstances
com.sun.tools.doclets.internal.toolkit.builders
    FieldBuilder - visibility changes
    MemberSummaryBuilder - visibility changes
com.sun.tools.javac.api
*   DiagnosticFormatter - abstract method added
com.sun.tools.javac.code
    Symbol - documentation added
com.sun.tools.javac.comp
**  Attr        - visibility, hooks and bug fixes
*   AttrContext        - visibility and new method
**  Check        - visibility and small logic changes
**  Enter        - visibility and small logic changes
**  Flow        - visibility and small logic changes
*   MemberEnter        - visibility and hooks - ONE CHANGE TO REVIEW
*   Resolve        - visibility and A CHANGE TO REVIEW
com.sun.tools.javac.jvm
*   ClassReader - code moved to avoid circular initialization; debug method added
com.sun.tools.javac.main
**  JavaCompiler - visibility and small logic changes
*   Main - visibility and always print error messages
com.sun.tools.javac.parser
**  DocCommentScanner - visibility and renaming  ::: is all the renaming necessary?
**  JavacParser - visibility and some hooks
**  Scanner - visibility and some changes to avoid inheritance
com.sun.tools.javac.tree
*   JCTree - uses a factory for Pretty
*   Pretty - visibility changes; added a factory; a couple defensive programming additions
*   TreeCopier - bug fix and additional method
com.sun.tools.javac.util
*   AbstractDiagnosticFormatter - additional hooks added
*   AbstractLog - optimization
*   BasicDiagnosticFormatter - hook added
*   ForwardingDiagnosticFormatter - hook added
*   JavacMessages - added debug information
*   JCDiagnostic - added implementation of a new abstract method
*   Log - added a flush (may not be needed?)
*   Options - added a debugging method
com.sun.tools.javadoc
*   ClassDocImpl - two small changes
*   DocEnv - visibility and bug fix
    ExecutableMemberDocImpl - visibility
    FieldDocImpl - visibility
    JavadocClassReader - visibility
    Messager - change to static
    ProgramElementDocImpl - visibility
    Start - visibility and hook - REVIEW THIS CHANGE FOR NECESSITY
com.sun.tools.javap
*   JavapTask - added an implementation of a new abstract method